# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: shopping-postgres
    environment:
      POSTGRES_DB: shoppingDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: shopping-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: shopping-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # PostgreSQL 설정
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shoppingDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password123
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # Redis 설정 (최신 방식)
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_TIMEOUT: 60000ms
      SPRING_REDIS_CONNECT_TIMEOUT: 10000ms
      # 기타 설정
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - shopping-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  shopping-network:
    driver: bridge